# Ten plik definiuje kroki kompilacji dla Google Cloud Build.
# Jest używany do automatycznego budowania i wdrażania aplikacji Firebase.

# Określamy, że logi z tej kompilacji mają być wysyłane tylko do Cloud Logging.
options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # Krok 0: Zainstaluj zależności Firebase CLI
  # Nadal instalujemy firebase-tools globalnie, aby było dostępne dla npx.
  - name: 'gcr.io/cloud-builders/npm'
    id: 'Install Firebase CLI'
    args: ['install', '-g', 'firebase-tools']

  # Krok 1: Zainstaluj zależności projektu (jeśli masz plik package.json)
  - name: 'gcr.io/cloud-builders/npm'
    id: 'Install Project Dependencies'
    args: ['install']

  # Krok 2: Zbuduj projekt (jeśli jest to aplikacja frontendowa)
  - name: 'gcr.io/cloud-builders/npm'
    id: 'Build Project'
    args: ['run', 'build'] # Zmień 'build' na odpowiednią komendę, np. 'prod'

  # Krok 3: Wdróż na Firebase Hosting
  # Używamy npx, aby uruchomić komendę firebase z zainstalowanych narzędzi.
  - name: 'gcr.io/cloud-builders/npm' # Nadal używamy obrazu npm
    id: 'Deploy to Firebase Hosting'
    # Zmieniamy entrypoint na 'npx', a 'firebase' staje się pierwszym argumentem.
    entrypoint: 'npx' # <-- KLUCZOWA ZMIANA: Używamy 'npx' jako punktu wejścia
    args: ['firebase', 'deploy', '--only', 'hosting', '--project', '$PROJECT_ID']
    # Jeśli masz wiele projektów Firebase lub niestandardową konfigurację,
    # możesz potrzebować `--project=your-firebase-project-id` zamiast `$PROJECT_ID`.
    # Jeśli używasz wielu celów hostingowych:
    # args: ['firebase', 'deploy', '--only', 'hosting:your-hosting-target', '--project', '$PROJECT_ID']

# Opcjonalnie: Zapisz artefakty (np. zbudowane pliki) do Cloud Storage
# artifacts:
#   objects:
#     location: 'gs://your-artifact-bucket/builds/$BUILD_ID'
#     paths: ['build/**']
