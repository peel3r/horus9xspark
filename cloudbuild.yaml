# Ten plik definiuje kroki kompilacji dla Google Cloud Build.
# Jest używany do automatycznego budowania i wdrażania aplikacji Firebase.

# Określamy, że logi z tej kompilacji mają być wysyłane tylko do Cloud Logging.
options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # Krok 1: Zainstaluj zależności projektu ORAZ firebase-tools lokalnie
  # Zmieniamy obraz na 'node:20', który zawiera Node.js w wersji 20.x
  - name: 'node:20' # <-- KLUCZOWA ZMIANA: Używamy obrazu Node.js 20
    id: 'Install Project Dependencies and Firebase CLI'
    entrypoint: 'npm' # Punkt wejścia dla tego obrazu to 'npm'
    args: ['install', 'firebase-tools']

  # Krok 2: Zbuduj projekt (jeśli jest to aplikacja frontendowa)
  # Używamy tego samego obrazu Node.js 20
  - name: 'node:20' # <-- KLUCZOWA ZMIANA: Używamy obrazu Node.js 20
    id: 'Build Project'
    entrypoint: 'npm' # Punkt wejścia dla tego obrazu to 'npm'
    args: ['run', 'build'] # Zmień 'build' na odpowiednią komendę, np. 'prod'

  # Krok 3: Wdróż na Firebase Hosting
  # Używamy tego samego obrazu Node.js 20
  - name: 'node:20' # <-- KLUCZOWA ZMIANA: Używamy obrazu Node.js 20
    id: 'Deploy to Firebase Hosting'
    entrypoint: 'npx' # Punkt wejścia dla tego obrazu to 'npx'
    args:
      - 'firebase' # Komenda, którą npx ma uruchomić
      - 'deploy'
      - '--only'
      - 'hosting'
      - '--project'
      - '$PROJECT_ID' # Zmienna środowiskowa Cloud Build dla ID projektu
    # Jeśli masz wiele projektów Firebase lub niestandardową konfigurację,
    # możesz potrzebować `--project=your-firebase-project-id` zamiast `$PROJECT_ID`.
    # Jeśli używasz wielu celów hostingowych:
    # args:
    #   - 'firebase'
    #   - 'deploy'
    #   - '--only'
    #   - 'hosting:your-hosting-target'
    #   - '--project'
    #   - '$PROJECT_ID'

# Opcjonalnie: Zapisz artefakty (np. zbudowane pliki) do Cloud Storage
# artifacts:
#   objects:
#     location: 'gs://your-artifact-bucket/builds/$BUILD_ID'
#     paths: ['build/**']
