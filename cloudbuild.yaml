    # cloudbuild.yaml
    steps:
    # Krok 1: Zainstaluj zależności Node.js
    # Używamy obrazu npm z Google Cloud Build
    - name: 'gcr.io/cloud-builders/npm'
      id: 'Install Dependencies'
      args: ['install'] # Odpowiednik `npm install`



    # Krok 2: Zbuduj aplikację React do produkcji
    # Używamy tego samego obrazu npm do uruchomienia skryptu `build`
    - name: 'gcr.io/cloud-builders/npm'
      id: 'Build React App'
      args: ['run', 'build'] # Odpowiednik `npm run build`

    # Krok 3: Wdróż na Firebase Hosting
    # Używamy oficjalnego obrazu gcloud SDK, aby zainstalować firebase-tools i wdrożyć.
    # Ważne: Cloud Build domyślnie uruchamia się jako konto serwisowe.
    # Upewnij się, że to konto serwisowe ma odpowiednie uprawnienia w Firebase.
    - name: 'gcr.io/google.com/cloudsdk/cloud-sdk'
      id: 'Deploy to Firebase Hosting'
      entrypoint: 'bash'
      args:
      - '-c'
      - |
        # Zainstaluj firebase-tools w kontenerze Cloud Build
        npm install -g firebase-tools
        # Wdróż na Firebase Hosting.
        # ${PROJECT_ID} to wbudowana zmienna środowiskowa Cloud Build,
        # która automatycznie zawiera ID Twojego projektu Google Cloud.
        # Cloud Build automatycznie uwierzytelnia się za pomocą konta serwisowego.
        firebase deploy --project=${PROJECT_ID} --only hosting
    # Uwaga: W tym setupie nie potrzebujemy tokena Firebase, ponieważ konto serwisowe Cloud Build
    # (domyślnie: [PROJECT_NUMBER]@cloudbuild.gserviceaccount.com)
    # zostanie automatycznie uwierzytelnione, jeśli ma odpowiednie role w projekcie Firebase.
    options:
      logging: CLOUD_LOGGING_ONLY