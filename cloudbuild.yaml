# Ten plik definiuje kroki kompilacji dla Google Cloud Build.
# Jest używany do automatycznego budowania i wdrażania aplikacji Firebase.

# Określamy, że logi z tej kompilacji mają być wysyłane tylko do Cloud Logging.
options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # Krok 1: Zainstaluj zależności Firebase CLI
  - name: 'gcr.io/cloud-builders/npm'
    id: 'Install Firebase CLI'
    args: ['install', '-g', 'firebase-tools']

  # Krok 2: Zainstaluj zależności projektu (jeśli masz plik package.json)
  - name: 'gcr.io/cloud-builders/npm'
    id: 'Install Project Dependencies'
    args: ['install']

  # Krok 3: Zbuduj projekt (jeśli jest to aplikacja frontendowa)
  - name: 'gcr.io/cloud-builders/npm'
    id: 'Build Project'
    args: ['run', 'build'] # Zmień 'build' na odpowiednią komendę, np. 'prod'

  # Krok 4: Wdróż na Firebase Hosting
  # Używamy zainstalowanego Firebase CLI do wdrożenia aplikacji.
  # --project=$PROJECT_ID automatycznie pobiera ID projektu Cloud Build.
  # --token=$FIREBASE_TOKEN jest opcjonalny, jeśli używasz Service Account.
  # Jeśli masz wiele celów hostingowych, możesz dodać --only hosting:your-target-name
  - name: 'gcr.io/cloud-builders/npm' # Nadal używamy obrazu npm, ponieważ to w nim zainstalowaliśmy firebase-tools
    id: 'Deploy to Firebase Hosting'
    entrypoint: 'firebase' # <-- KLUCZOWA ZMIANA: Używamy 'firebase' jako punktu wejścia
    args: ['deploy', '--only', 'hosting', '--project', '$PROJECT_ID']
    # Jeśli masz wiele projektów Firebase lub niestandardową konfigurację,
    # możesz potrzebować `--project=your-firebase-project-id` zamiast `$PROJECT_ID`.
    # Jeśli używasz wielu celów hostingowych:
    # args: ['deploy', '--only', 'hosting:your-hosting-target', '--project', '$PROJECT_ID']

# Opcjonalnie: Zapisz artefakty (np. zbudowane pliki) do Cloud Storage
# artifacts:
#   objects:
#     location: 'gs://your-artifact-bucket/builds/$BUILD_ID'
#     paths: ['build/**']
